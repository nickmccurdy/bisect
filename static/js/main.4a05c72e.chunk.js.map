{"version":3,"sources":["Progress.tsx","Bisect.tsx","SetupForm.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["getSteps","length","Math","ceil","log2","pluralize","word","count","suffix","Progress","candidatesCount","currentCandidatesCount","Typography","LinearProgress","variant","value","useStyles","makeStyles","bad","color","colors","red","good","green","Bisect","candidates","reset","classes","useState","first","setFirst","last","setLast","bisecting","middle","floor","Card","CardContent","component","gutterBottom","CardActions","disableSpacing","Button","className","onClick","disabled","SetupForm","onSubmit","setValue","error","setError","event","preventDefault","split","filter","x","TextField","label","multiline","fullWidth","onChange","target","helperText","type","App","setCandidates","Container","maxWidth","CallSplit","Link","href","undefined","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.4a05c72e.chunk.js","sourcesContent":["import { LinearProgress, Typography } from \"@material-ui/core\"\nimport React from \"react\"\n\nfunction getSteps(length: number) {\n  return Math.ceil(Math.log2(length))\n}\n\nfunction pluralize(word: string, count: number) {\n  const suffix = count === 1 ? \"\" : \"s\"\n  return `${count} ${word}${suffix}`\n}\n\nexport default function Progress({\n  candidatesCount,\n  currentCandidatesCount,\n}: {\n  candidatesCount: number\n  currentCandidatesCount: number\n}) {\n  return (\n    <>\n      <Typography>\n        {currentCandidatesCount ? (\n          <>\n            {pluralize(\"candidate\", currentCandidatesCount)} left to test after\n            this (roughly {pluralize(\"step\", getSteps(currentCandidatesCount))})\n          </>\n        ) : (\n          \"Completed\"\n        )}\n      </Typography>\n      <LinearProgress\n        variant=\"determinate\"\n        value={\n          currentCandidatesCount === candidatesCount\n            ? 0\n            : ((getSteps(candidatesCount) - getSteps(currentCandidatesCount)) /\n                getSteps(candidatesCount)) *\n              100\n        }\n      />\n    </>\n  )\n}\n","import {\n  Button,\n  Card,\n  CardActions,\n  CardContent,\n  colors,\n  makeStyles,\n  Typography,\n} from \"@material-ui/core\"\nimport React, { useState } from \"react\"\nimport Progress from \"./Progress\"\n\nconst useStyles = makeStyles({\n  bad: { color: colors.red[500] },\n  good: { color: colors.green[500] },\n})\n\nexport default function Bisect({\n  candidates,\n  reset,\n}: {\n  candidates: string[]\n  reset(): void\n}) {\n  const classes = useStyles()\n  const [first, setFirst] = useState(0)\n  const [last, setLast] = useState(candidates.length - 1)\n\n  const bisecting = first <= last\n  const middle = Math.floor((first + last) / 2)\n\n  return (\n    <>\n      <Card>\n        <CardContent>\n          <Typography variant=\"h5\" component=\"h2\">\n            {bisecting\n              ? \"Current Candidate\"\n              : first === candidates.length\n              ? \"All Candidates Good\"\n              : \"First Bad Candidate\"}\n          </Typography>\n          <Typography gutterBottom>\n            {bisecting ? candidates[middle] : candidates[middle + 1]}\n          </Typography>\n          <Progress\n            candidatesCount={candidates.length}\n            currentCandidatesCount={last + 1 - first}\n          />\n        </CardContent>\n        <CardActions disableSpacing>\n          <Button\n            className={classes.bad}\n            onClick={() => setLast(middle - 1)}\n            disabled={!bisecting}\n          >\n            Bad\n          </Button>\n          <Button\n            className={classes.good}\n            onClick={() => setFirst(middle + 1)}\n            disabled={!bisecting}\n          >\n            Good\n          </Button>\n          <Button\n            onClick={() => {\n              setFirst(0)\n              setLast(candidates.length - 1)\n            }}\n          >\n            Restart\n          </Button>\n          <Button onClick={reset}>Reset</Button>\n        </CardActions>\n      </Card>\n    </>\n  )\n}\n","import {\n  Button,\n  Card,\n  CardActions,\n  CardContent,\n  TextField,\n  Typography,\n} from \"@material-ui/core\"\nimport React, { useState } from \"react\"\n\nexport default function SetupForm({\n  onSubmit,\n}: {\n  onSubmit(candidates: string[]): void\n}) {\n  const [value, setValue] = useState(\"\")\n  const [error, setError] = useState(false)\n\n  return (\n    <form\n      onSubmit={(event) => {\n        event.preventDefault()\n\n        const candidates = value.split(\"\\n\").filter((x) => x)\n\n        if (candidates.length) {\n          onSubmit(candidates)\n        } else {\n          setError(true)\n        }\n      }}\n    >\n      <Card>\n        <CardContent>\n          <Typography variant=\"h5\" component=\"h2\">\n            Setup\n          </Typography>\n          <Typography gutterBottom>\n            Enter candidates you want to bisect, one on each line. Bisect will\n            ask you to test candidates starting from the middle, and will\n            continue the binary search with candidates before or after it\n            depending on if you mark the candidate as bad or good\n            (respectively).\n          </Typography>\n          <Typography gutterBottom>\n            Candidates should be sorted with good candidates before bad\n            candidates. Bisect needs to rely on this assumption to perform a\n            sorted binary search, otherwise you would have to test every single\n            candidate.\n          </Typography>\n          <TextField\n            label=\"Candidates\"\n            multiline\n            fullWidth\n            value={value}\n            onChange={(event) => setValue(event.target.value)}\n            error={error}\n            helperText={error && \"At least one candidate is required\"}\n          />\n        </CardContent>\n        <CardActions>\n          <Button type=\"submit\" color=\"primary\">\n            Start\n          </Button>\n        </CardActions>\n      </Card>\n    </form>\n  )\n}\n","import { Container, Link, Typography } from \"@material-ui/core\"\nimport { CallSplit } from \"@material-ui/icons\"\nimport React, { useState } from \"react\"\nimport \"typeface-roboto\"\nimport Bisect from \"./Bisect\"\nimport SetupForm from \"./SetupForm\"\n\nexport default function App() {\n  const [candidates, setCandidates] = useState<string[]>()\n\n  return (\n    <Container maxWidth=\"sm\">\n      <Typography variant=\"h4\" component=\"h1\">\n        <CallSplit /> Bisect\n      </Typography>\n      <Typography gutterBottom>\n        An interactive GUI for binary searches. Inspired by{\" \"}\n        <Link href=\"https://git-scm.com/docs/git-bisect\">\n          <code>git bisect</code>\n        </Link>\n        .\n      </Typography>\n\n      {candidates ? (\n        <Bisect\n          candidates={candidates}\n          reset={() => setCandidates(undefined)}\n        />\n      ) : (\n        <SetupForm onSubmit={setCandidates} />\n      )}\n\n      <br />\n\n      <Typography>\n        <Link href=\"https://github.com/nickmccurdy/bisect\">\n          Source on GitHub\n        </Link>\n      </Typography>\n    </Container>\n  )\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\",\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\",\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\")\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\")\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\",\n      )\n    })\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport App from \"./App\"\nimport * as serviceWorker from \"./serviceWorker\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\"),\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}